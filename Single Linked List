class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def create(data):
    return Node(data)

def insert_beginning(head, data):
    new_node = create(data)
    new_node.next = head
    return new_node

def insert_end(head, data):
    new_node = create(data)
    if head is None:
        return new_node
    last_node = head
    while last_node.next:
        last_node = last_node.next
    last_node.next = new_node
    return head

def insert_position(head, data, position):
    if position <= 1:
        return insert_beginning(head, data)
    new_node = create(data)
    current = head
    for _ in range(position - 2):
        if current is None:
            break
        current = current.next
    if current is None:
        return insert_end(head, data)
    new_node.next = current.next
    current.next = new_node
    return head

def delete_beginning(head):
    if head is None:
        print("Linked List is Empty")
        return None
    temp = head
    head = head.next
    del temp
    return head

def delete_end(head):
    if head is None:
        print("Linked List is Empty")
        return None
    if head.next is None:
        del head
        return None
    second_last = head
    while second_last.next.next:
        second_last = second_last.next
    del second_last.next
    second_last.next = None
    return head

def delete_position(head, position):
    if head is None:
        print("Linked List is Empty")
        return None
    if position <= 1:
        return delete_beginning(head)
    current = head
    for _ in range(position - 2):
        if current.next is None:
            break
        current = current.next
    if current is None or current.next is None:
        return delete_end(head)
    temp = current.next
    current.next = temp.next
    del temp
    return head

def search(head, key):
    position = 0
    current = head
    while current:
        position += 1
        if current.data == key:
            print(f"Key is found at position {position}")
            return
        current = current.next
    print("Key is not found")

def reverse(head):
    prev = None
    current = head
    while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
    return prev

def remove_duplicates(head):
    current = head
    while current:
        runner = current
        while runner.next:
            if current.data == runner.next.data:
                temp = runner.next
                runner.next = runner.next.next
                del temp
            else:
                runner = runner.next
        current = current.next

def length(head):
    count = 0
    current = head
    while current:
        count += 1
        current = current.next
    return count

def display(head):
    current = head
    print("\n~~~~~~~~~~~~~~~~~~~")
    while current:
        print(current.data, end=" ")
        current = current.next
    print("\n~~~~~~~~~~~~~~~~~~~\n")

def split(head):
    if head is None or head.next is None:
        print("List is too short to split.")
        return None, None
    
    slow_ptr = head
    fast_ptr = head.next
    while fast_ptr and fast_ptr.next:
        slow_ptr = slow_ptr.next
        fast_ptr = fast_ptr.next.next
    
    second_head = slow_ptr.next
    slow_ptr.next = None
    return head, second_head

# Main function to test the linked list operations
if __name__ == "__main__":
    head = None
    while True:
        data = int(input("Enter data for the node: "))
        head = insert_end(head, data)
        choice = input("Do you want to insert more? (y/n): ")
        if choice.lower() != 'y':
            break
    
    while True:
        print("\n~~~~~~~~~~~~~~~~~~~")
        print("Operations:")
        print("1. Insert at beginning")
        print("2. Insert at end")
        print("3. Insert at specific position")
        print("4. Delete at beginning")
        print("5. Delete at end")
        print("6. Delete at specific position")
        print("7. Search operation")
        print("8. Reverse operation")
        print("9. Remove duplicates")
        print("10. Length of linked list")
        print("11. Display")
        print("12. Split")
        print("0. Exit")
        print("~~~~~~~~~~~~~~~~~~~")
        
        choice = int(input("Enter your choice: "))
        
        if choice == 1:
            data = int(input("Enter data for the node: "))
            head = insert_beginning(head, data)
            display(head)
        elif choice == 2:
            data = int(input("Enter data for the node: "))
            head = insert_end(head, data)
            display(head)
        elif choice == 3:
            data = int(input("Enter data for the node: "))
            position = int(input("Enter the position: "))
            head = insert_position(head, data, position)
            display(head)
        elif choice == 4:
            head = delete_beginning(head)
            display(head)
        elif choice == 5:
            head = delete_end(head)
            display(head)
        elif choice == 6:
            position = int(input("Enter the position: "))
            head = delete_position(head, position)
            display(head)
        elif choice == 7:
            key = int(input("Enter search key: "))
            search(head, key)
        elif choice == 8:
            head = reverse(head)
            display(head)
        elif choice == 9:
            remove_duplicates(head)
            display(head)
        elif choice == 10:
            length_of_list = length(head)
            print(f"Length of linked list is {length_of_list}")
        elif choice == 11:
            display(head)
        elif choice == 12:
            first_half, second_half = split(head)
            print("First Half of Linked List:")
            display(first_half)
            print("Second Half of Linked List:")
            display(second_half)
        elif choice == 0:
            print("Program Exit!")
            break
        else:
            print("Invalid choice")
